```shell
# Validate only the Biller Code.
my-machine$ curl -u USER:PASS BASE_URL/bpay/v1/validate/857763

{
  "validation": {
                  "amount": null,
                  "billerCode": "857763",
                  "billerName": "MONEYTECH FINANCE PTY LTD",
                  "customerReferenceNumber": null,
                  "maximumPaymentAmount": 50000,
                  "minimumPaymentAmount": 10.0,
                  "isVariableCrn": false
                },
  "status": "Ok",
  "statusDescription": "Validation has Passed",
  "durationMs": 16
}
# The customerReferenceNumber and amount is null. After this call we know that the biller code is correct because the status is “Ok”.

# Validate Biller Code and customer reference number.
my-machine$ curl -u USER:PASS BASE_URL/bpay/v1/validate/857763?custRef=6279059700000505

{
  "validation": {
                  "amount": null,
                  "billerCode": "857763",
                  "billerName": "MONEYTECH FINANCE PTY LTD",
                  "customerReferenceNumber": "6279059700000505",
                  "maximumPaymentAmount": 50000,
                  "minimumPaymentAmount": 10.0,
                  "isVariableCrn": false
                },
  "status": "Ok",
  "statusDescription": "Validation has Passed",
  "durationMs": 16
}
# The amount is null. After this call we know that the billerCode and customerReference number is correct because the status is “Ok”.

# Validate Biller Code, reference number & amount.
my-machine$ curl -u USER:PASS BASE_URL/bpay/v1/validate/857763?custRef=6279059700000505&amount=100.75

{
  "validation": {
                  "amount": 100.7500,
                  "billerCode": "857763",
                  "billerName": "MONEYTECH FINANCE PTY LTD",
                  "customerReferenceNumber": "6279059700000505",
                  "maximumPaymentAmount": 50000,
                  "minimumPaymentAmount": 10.0,
                  "isVariableCrn": false
                },
  "status": "Ok",
  "statusDescription": "Validation has Passed",
  "durationMs": 16
}
# After this call we know that the billerCode, customerReference number and amount are correct because the status is “Ok”. The BPAY information is fully validated.
```

```python
import requests
from requests.auth import HTTPBasicAuth

billerCodeOnly = "/bpay/v1/validate/857763";
billerCodeAndCustRef = billerCodeOnly + "?custRef=6279059700000505";
billerCodeCustRefAndAmount = billerCodeAndCustRef + "&amount=100.75";
r = requests.get(BASE_URL + billerCodeCustRefAndAmount, auth=HTTPBasicAuth(USER, PASS))
print(r)
```

```javascript
let rp = require('request-promise');
let billerCodeOnly = "/bpay/v1/validate/857763";
let billerCodeAndCustRef = billerCodeOnly + "?custRef=6279059700000505";
let billerCodeCustRefAndAmount = billerCodeAndCustRef + "&amount=100.75";

var options = {
   method: "GET",
   uri: BASE_URL + billerCodeAndCustRef,
   headers: {
      'Authorization': 'Basic ' + new Buffer(USER + ':' + PASS).toString('base64')
   },
   json: true // Automatically parses the JSON string in the response 
};

rp(options)
   .then(res => {
      console.log('result:', res);
   })
   .catch(err => {
      // request failed
      console.log('error:', err);
   });
```